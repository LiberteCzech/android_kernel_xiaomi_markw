#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=`dirname "$ZIPFILE"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_perm_recursive() {
  dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    $bb chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}
file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; }
cleanup() { rm -rf /tmp/anykernel; }
abort() {
  if [ ! -f /tmp/anykernel/anykernel.sh -o "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanuponabort 2>/dev/null)" == 1 ]; then
    ui_print "$*"; cleanup; umount /system; umount /data; umount /vendor; exit 1;
  else
    ui_print "$*"; umount /system; umount /data; umount /vendor; exit 1;
  fi;
}

show_progress 1.34 4;
ui_print " ";
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
bb=/tmp/anykernel/tools/busybox;

ui_print "$(file_getprop /tmp/anykernel/anykernel.sh kernel.string)";
ui_print " ";
ui_print "AnyKernel2 by osm0sis @ xda-developers";
ui_print "*************************************************";
ui_print "       ___        __                             ";
ui_print "      |_ _|_ __  / _| ___ _ __ _ __   ___        ";
ui_print "       | || '_ \| |_ / _ \ '__| '_ \ / _ \       ";
ui_print "       | || | | |  _|  __/ |  | | | | (_) |      ";
ui_print "      |___|_| |_|_|  \___|_|  |_| |_|\___/       ";
ui_print "                                      Oreo       ";
ui_print "                                                 ";
ui_print "- Redmi 4 High Version -                 - ZPX - ";
ui_print "                - ported by SonicBSV for Markw - ";
ui_print "*************************************************";
ui_print " ";
umount /system 2>/dev/null;
umount /vendor 2>/dev/null;
mount -o ro -t auto /system;
mount -o ro -t auto /vendor 2>/dev/null;
mount /data 2>/dev/null;
test -f /system/system/build.prop && root=/system;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  ui_print "Checking device...";
  for i in 1 2 3 4 5; do
    testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
    if [ "$(getprop ro.product.device)" == "$testname" -o "$(getprop ro.build.product)" == "$testname" ]; then
      ui_print "$testname";
      match=1;
    fi;
  done;
  ui_print " ";
  if [ "$match" != 1 ]; then
    abort "Unsupported device. Aborting...";
  fi;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.treblestatus)" == 1 ]; then
    if [ "$(file_getprop /system/build.prop ro.treble.enabled)" == "true" ]; then
      dtb=/tmp/anykernel/treble-supported;
      ui_print "Treble status : Supported";
      mount -o rw,remount -t auto /vendor;
      cp -rf /tmp/anykernel/patch/thermal-engine.conf /vendor/etc/thermal-engine.conf;
      cp -rf /tmp/anykernel/patch/init.qcom.post_boot.sh /vendor/bin/init.qcom.post_boot.sh;
      chmod 0644 /vendor/etc/thermal-engine.conf;
      chmod 0755 /vendor/bin/init.qcom.post_boot.sh;
      mount -o ro,remount -t auto /vendor;
    else
      dtb=/tmp/anykernel/treble-unsupported;
      ui_print "Treble status : Unsupported";
      mount -o rw,remount -t auto /system;
      cp -rf /tmp/anykernel/patch/thermal-engine.conf /system/vendor/etc/thermal-engine.conf;
      cp -rf /tmp/anykernel/patch/init.qcom.post_boot.sh /system/vendor/bin/init.qcom.post_boot.sh;
      chmod 0644 /system/vendor/etc/thermal-engine.conf;
      chmod 0755 /system/vendor/bin/init.qcom.post_boot.sh;
      mount -o ro,remount -t auto /system;
    fi;
fi;

ui_print "Installing kernel...";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
cat /tmp/anykernel/Image.gz $dtb/*.dtb > /tmp/anykernel/Image.gz-dtb;
rm -rf /tmp/anykernel/Image.gz;
if [ $? != "0" ]; then
  abort;
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.modules)" == 1 ]; then
  ui_print " ";
  ui_print "Pushing modules...";
  mount -o rw,remount -t auto /system;
  cp -rf /tmp/anykernel/modules/* $root/system/lib/modules/;
  set_perm_recursive 0 0 0755 0644 $root/system/lib/modules;
  mount -o ro,remount -t auto /system;
fi;

case $(basename "$ZIPFILE" .zip) in
  *-debugging)
    ui_print " ";
    ui_print "Creating debugging archive in zip directory...";
    $bb tar -czvf "$DIR/anykernel2-$(date +%Y-%m-%d_%H%M%S)-debug.tgz" /tmp/*;
  ;;
esac;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;

umount /system;
umount /vendor 2>/dev/null;
umount /data 2>/dev/null;
ui_print " ";
ui_print "Done!";
